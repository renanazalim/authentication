# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Authentication-Frontend CI/CD

env:
  WORKSPACE_PATH: frontend/authentication
  BRANCH_MASTER: 'refs/heads/master'

on:
  push:
    branches: [ "master" ]
    paths:
      - '.github/workflows/authentication-frontend.js.yml'
      - 'frontend/authentication/**'
  pull_request:
    branches: [ "master" ]
    paths:
      - '.github/workflows/authentication-frontend.js.yml'
      - 'frontend/authentication/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: 'Checkout: ${{ github.ref }}'
        with:
          fetch-depth: 0

      - name: Install ESLint
        run: |
          cd $WORKSPACE_PATH
          npm install eslint@8.10.0
          npm install @microsoft/eslint-formatter-sarif@2.1.7

      - name: Run ESLint
        run: npx eslint .
          --config .eslintrc.js
          --ext .js,.jsx,.ts,.tsx
          --format @microsoft/eslint-formatter-sarif 
          --output-file eslint-results.sarif
        continue-on-error: true

      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Packages CI
        run: |
          cd $WORKSPACE_PATH && npm ci
    
      - name: React Build
        run: |
          cd $WORKSPACE_PATH && npm run build --if-present

      # - name: Run Tests
      #   run: |
      #     cd $WORKSPACE_PATH && npm test

      - name: Configure AWS Credentials
        if: github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Production
        if: github.ref == env.BRANCH_MASTER
        run: cd $WORKSPACE_PATH && npx sls deploy --region ${{ secrets.AWS_REGION }} -s prod
