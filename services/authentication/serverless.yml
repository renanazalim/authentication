service: authentication-service

frameworkVersion: '3'
useDotenv: true

custom:
  webpack:
    webpackConfig: ../../webpack.config.js
    packager: 'npm'
    includeModules: true

plugins:
  - serverless-plugin-monorepo
  - serverless-webpack
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-prune-plugin

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, "local"}
  region: ${opt:region, "us-east-2"}
  deploymentBucket:
    name: authentication-service-${opt:stage, 'local'}
    serverSideEncryption: AES256
  tracing:
    lambda: true
    apiGateway: true
  environment:
    JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
    JWT_SECRET_REFRESH_KEY: ${env:JWT_SECRET_REFRESH_KEY}
    JWT_EXPIRES_TOKEN: ${env:JWT_EXPIRES_TOKEN}

functions:
  Authorizer:
    handler: src/api/handler.authorization
    events:
      - http:
          method: post
          path: /api/authentication/getToken
    tags:
      Entity: Api
      API_Version: "1"

resources:
  Resources:
    ApiCredentialTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Api.Credential
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: service
            AttributeType: S
          - AttributeName: secretKey
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    UserCredentialTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: User.Credential
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userName
            AttributeType: S
          - AttributeName: password
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
